{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"C:\\\\Users\\\\retbr\\\\IdeaProjects\\\\pizzamasterreact\\\\src\\\\components\\\\tools\\\\DatabaseManagement.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport MaterialTable from 'material-table';\nexport default function DatabaseManagement() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Name',\n      field: 'name'\n    }, {\n      title: 'Surname',\n      field: 'surname'\n    }, {\n      title: 'Birth Year',\n      field: 'birthYear',\n      type: 'numeric'\n    }, {\n      title: 'Birth Place',\n      field: 'birthCity',\n      lookup: {\n        34: 'İstanbul',\n        63: 'Şanlıurfa'\n      }\n    }],\n    data: [{\n      name: 'Mehmet',\n      surname: 'Baran',\n      birthYear: 1987,\n      birthCity: 63\n    }, {\n      name: 'Zerya Betül',\n      surname: 'Baran',\n      birthYear: 2017,\n      birthCity: 34\n    }]\n  });\n  return __jsx(MaterialTable, {\n    title: \"Editable Example\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new _Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return _objectSpread({}, prevState, {\n              data\n            });\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new _Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return _objectSpread({}, prevState, {\n                data\n              });\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new _Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return _objectSpread({}, prevState, {\n              data\n            });\n          });\n        }, 600);\n      })\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:/Users/retbr/IdeaProjects/pizzamasterreact/src/components/tools/DatabaseManagement.tsx"],"names":["React","MaterialTable","DatabaseManagement","state","setState","useState","columns","title","field","type","lookup","data","name","surname","birthYear","birthCity","onRowAdd","newData","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport MaterialTable, { Column } from 'material-table';\r\n\r\ninterface Row {\r\n\tname: string;\r\n\tsurname: string;\r\n\tbirthYear: number;\r\n\tbirthCity: number;\r\n}\r\n\r\ninterface TableState {\r\n\tcolumns: Array<Column<Row>>;\r\n\tdata: Row[];\r\n}\r\n\r\nexport default function DatabaseManagement() {\r\n\tconst [state, setState] = React.useState<TableState>({\r\n\t\tcolumns: [\r\n\t\t\t{ title: 'Name', field: 'name' },\r\n\t\t\t{ title: 'Surname', field: 'surname' },\r\n\t\t\t{ title: 'Birth Year', field: 'birthYear', type: 'numeric' },\r\n\t\t\t{\r\n\t\t\t\ttitle: 'Birth Place',\r\n\t\t\t\tfield: 'birthCity',\r\n\t\t\t\tlookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\r\n\t\t\t},\r\n\t\t],\r\n\t\tdata: [\r\n\t\t\t{ name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63 },\r\n\t\t\t{\r\n\t\t\t\tname: 'Zerya Betül',\r\n\t\t\t\tsurname: 'Baran',\r\n\t\t\t\tbirthYear: 2017,\r\n\t\t\t\tbirthCity: 34,\r\n\t\t\t},\r\n\t\t],\r\n\t});\r\n\r\n\treturn (\r\n\t\t<MaterialTable\r\n\t\t\ttitle=\"Editable Example\"\r\n\t\t\tcolumns={state.columns}\r\n\t\t\tdata={state.data}\r\n\t\t\teditable={{\r\n\t\t\t\tonRowAdd: newData =>\r\n\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\tsetState(prevState => {\r\n\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\tdata.push(newData);\r\n\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t}),\r\n\t\t\t\tonRowUpdate: (newData, oldData) =>\r\n\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\tif (oldData) {\r\n\t\t\t\t\t\t\t\tsetState(prevState => {\r\n\t\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\t\tdata[data.indexOf(oldData)] = newData;\r\n\t\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t}),\r\n\t\t\t\tonRowDelete: oldData =>\r\n\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\tsetState(prevState => {\r\n\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\tdata.splice(data.indexOf(oldData), 1);\r\n\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t}),\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}