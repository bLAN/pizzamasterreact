{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"C:\\\\Users\\\\retbr\\\\IdeaProjects\\\\pizzamasterreact\\\\src\\\\components\\\\tools\\\\DatabaseManagement.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport MaterialTable from 'material-table';\nexport default function DatabaseManagement() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Item',\n      field: 'item'\n    }, {\n      title: 'Item ID',\n      field: 'itemId',\n      type: 'numeric'\n    }, {\n      title: 'Stock',\n      field: 'stock',\n      type: 'numeric'\n    }],\n    data: [{\n      item: 'Grandiosa',\n      itemId: 1,\n      stock: 1987\n    }, {\n      item: 'Grandiosa Pepperoni',\n      itemId: 2,\n      stock: 123\n    }]\n  });\n  return __jsx(MaterialTable, {\n    title: \"Editable Example\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new _Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return _objectSpread({}, prevState, {\n              data\n            });\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new _Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return _objectSpread({}, prevState, {\n                data\n              });\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new _Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return _objectSpread({}, prevState, {\n              data\n            });\n          });\n        }, 600);\n      })\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:/Users/retbr/IdeaProjects/pizzamasterreact/src/components/tools/DatabaseManagement.tsx"],"names":["React","MaterialTable","DatabaseManagement","state","setState","useState","columns","title","field","type","data","item","itemId","stock","onRowAdd","newData","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAAsC,gBAAtC;AAaA,eAAe,SAASC,kBAAT,GAA8B;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAA2B;AACpDC,IAAAA,OAAO,EAAE,CACR;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KADQ,EAER;AAAED,MAAAA,KAAK,EAAE,SAAT;AAAoBC,MAAAA,KAAK,EAAE,QAA3B;AAAqCC,MAAAA,IAAI,EAAE;AAA3C,KAFQ,EAGR;AAAEF,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,KAAK,EAAE,OAAzB;AAAkCC,MAAAA,IAAI,EAAE;AAAxC,KAHQ,CAD2C;AAMpDC,IAAAA,IAAI,EAAE,CACL;AAAEC,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,MAAM,EAAE,CAA7B;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KADK,EAEL;AACCF,MAAAA,IAAI,EAAE,qBADP;AAECC,MAAAA,MAAM,EAAE,CAFT;AAGCC,MAAAA,KAAK,EAAE;AAHR,KAFK;AAN8C,GAA3B,CAA1B;AAgBA,SACC,MAAC,aAAD;AACC,IAAA,KAAK,EAAC,kBADP;AAEC,IAAA,OAAO,EAAEV,KAAK,CAACG,OAFhB;AAGC,IAAA,IAAI,EAAEH,KAAK,CAACO,IAHb;AAIC,IAAA,QAAQ,EAAE;AACTI,MAAAA,QAAQ,EAAEC,OAAO,IAChB,aAAYC,OAAO,IAAI;AACtBC,QAAAA,UAAU,CAAC,MAAM;AAChBD,UAAAA,OAAO;AACPZ,UAAAA,QAAQ,CAACc,SAAS,IAAI;AACrB,kBAAMR,IAAI,GAAG,CAAC,GAAGQ,SAAS,CAACR,IAAd,CAAb;AACAA,YAAAA,IAAI,CAACS,IAAL,CAAUJ,OAAV;AACA,qCAAYG,SAAZ;AAAuBR,cAAAA;AAAvB;AACA,WAJO,CAAR;AAKA,SAPS,EAOP,GAPO,CAAV;AAQA,OATD,CAFQ;AAYTU,MAAAA,WAAW,EAAE,CAACL,OAAD,EAAUM,OAAV,KACZ,aAAYL,OAAO,IAAI;AACtBC,QAAAA,UAAU,CAAC,MAAM;AAChBD,UAAAA,OAAO;;AACP,cAAIK,OAAJ,EAAa;AACZjB,YAAAA,QAAQ,CAACc,SAAS,IAAI;AACrB,oBAAMR,IAAI,GAAG,CAAC,GAAGQ,SAAS,CAACR,IAAd,CAAb;AACAA,cAAAA,IAAI,CAACA,IAAI,CAACY,OAAL,CAAaD,OAAb,CAAD,CAAJ,GAA8BN,OAA9B;AACA,uCAAYG,SAAZ;AAAuBR,gBAAAA;AAAvB;AACA,aAJO,CAAR;AAKA;AACD,SATS,EASP,GATO,CAAV;AAUA,OAXD,CAbQ;AAyBTa,MAAAA,WAAW,EAAEF,OAAO,IACnB,aAAYL,OAAO,IAAI;AACtBC,QAAAA,UAAU,CAAC,MAAM;AAChBD,UAAAA,OAAO;AACPZ,UAAAA,QAAQ,CAACc,SAAS,IAAI;AACrB,kBAAMR,IAAI,GAAG,CAAC,GAAGQ,SAAS,CAACR,IAAd,CAAb;AACAA,YAAAA,IAAI,CAACc,MAAL,CAAYd,IAAI,CAACY,OAAL,CAAaD,OAAb,CAAZ,EAAmC,CAAnC;AACA,qCAAYH,SAAZ;AAAuBR,cAAAA;AAAvB;AACA,WAJO,CAAR;AAKA,SAPS,EAOP,GAPO,CAAV;AAQA,OATD;AA1BQ,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD;AA4CA","sourcesContent":["import React from 'react';\r\nimport MaterialTable, { Column } from 'material-table';\r\n\r\ninterface Row {\r\n\titem: string;\r\n\titemId: number;\r\n\tstock: number;\r\n}\r\n\r\ninterface TableState {\r\n\tcolumns: Array<Column<Row>>;\r\n\tdata: Row[];\r\n}\r\n\r\nexport default function DatabaseManagement() {\r\n\tconst [state, setState] = React.useState<TableState>({\r\n\t\tcolumns: [\r\n\t\t\t{ title: 'Item', field: 'item' },\r\n\t\t\t{ title: 'Item ID', field: 'itemId', type: 'numeric' },\r\n\t\t\t{ title: 'Stock', field: 'stock', type: 'numeric' },\r\n\t\t],\r\n\t\tdata: [\r\n\t\t\t{ item: 'Grandiosa', itemId: 1, stock: 1987 },\r\n\t\t\t{\r\n\t\t\t\titem: 'Grandiosa Pepperoni',\r\n\t\t\t\titemId: 2,\r\n\t\t\t\tstock: 123,\r\n\t\t\t},\r\n\t\t],\r\n\t});\r\n\r\n\treturn (\r\n\t\t<MaterialTable\r\n\t\t\ttitle=\"Editable Example\"\r\n\t\t\tcolumns={state.columns}\r\n\t\t\tdata={state.data}\r\n\t\t\teditable={{\r\n\t\t\t\tonRowAdd: newData =>\r\n\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\tsetState(prevState => {\r\n\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\tdata.push(newData);\r\n\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t}),\r\n\t\t\t\tonRowUpdate: (newData, oldData) =>\r\n\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\tif (oldData) {\r\n\t\t\t\t\t\t\t\tsetState(prevState => {\r\n\t\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\t\tdata[data.indexOf(oldData)] = newData;\r\n\t\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t}),\r\n\t\t\t\tonRowDelete: oldData =>\r\n\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\tsetState(prevState => {\r\n\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\tdata.splice(data.indexOf(oldData), 1);\r\n\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t}),\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}